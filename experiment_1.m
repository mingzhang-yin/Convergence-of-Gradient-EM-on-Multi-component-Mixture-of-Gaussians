%% Experiment for sample complexityclear;clc;close all;%% 1. M=3, pi = 1/3% figure 1 log(stat error) -iteration plot% unequal pi% small SNRn_list = round(1./(linspace(1/sqrt(500),1/sqrt(15000),10)).^2);%[500,1000,2000,4000,6000,8000,10000];% labeled/unlabeled respectivelyR = 5; r = R/3;alpha = R/(sqrt(2));prior = 0;%no priorn_t = 50; %number of repeated experimentgamma = 1;max_iter = 200;    for tt=1:length(n_list)    M_D = 3;    n = n_list(tt);    %M_D=M_list(tt);    Pi = ones(1,M_D)*(1/M_D); %balanced    mu = eye(M_D)*alpha; % #row->#mixtures, #col->#dimension    [k,d] = size(mu);    t0 = ones(M_D);     %t is sd    fprintf('Dimension = %d, M= %d \n',d,M_D);    for i=1:n_t %repeat same test n_t times        [X,ytrue] = gen_mixture(n,mu,t0,Pi);        % initialization                mu0 = mu;        for k_mu0=1:M_D,            random_dir = mvnrnd(zeros(1,d),eye(d));            mu0(k_mu0,:) = mu(k_mu0,:) + random_dir/norm(random_dir)*r;        end        [test_UL,mu_infer] = test3(X,ytrue,mu,M_D,Pi,max_iter,mu0);%test2(X,ytrue,alpha,M_D,Pi,max_iter,L,mu0)        final_error_m3d3(tt,i) = exp(test_UL(end));        fprintf('n = %d, iRep: %d, err = %f\n',n,i,exp(test_UL(end)));    endend%% 2. M=3, pi = unbalanced% unequal pifor tt=1:length(n_list)    M_D = 3;    n = n_list(tt);    %M_D=M_list(tt);    Pi = [.6,.2,.2]; %imbalanced    mu = eye(M_D)*alpha; % #row->#mixtures, #col->#dimension    [k,d] = size(mu);    t0 = ones(M_D);     %t is sd    fprintf('Dimension = %d, M= %d \n',d,M_D);    for i=1:n_t %repeat same test n_t times        [X,ytrue] = gen_mixture(n,mu,t0,Pi);        % initialization        %r = R*2/5;        mu0=mu;        for k_mu0=1:M_D,            random_dir = mvnrnd(zeros(1,d),eye(d));            mu0(k_mu0,:) = mu(k_mu0,:) + random_dir/norm(random_dir)*r;        end        [test_UL,mu_infer] = test3(X,ytrue,mu,M_D,Pi,max_iter,mu0);%test2(X,ytrue,alpha,M_D,Pi,max_iter,L,mu0)        final_error_m3d3_unbal(tt,i) = exp(test_UL(end));        fprintf('n = %d, iRep: %d, err = %f\n',n,i,exp(test_UL(end)));    endend%% 2.5. M=d=5, pi = balancedfor tt=1:length(n_list)    M_D = 5;    n = n_list(tt);    %M_D=M_list(tt);    Pi = ones(1,M_D)/M_D; %imbalanced    mu = eye(M_D)*alpha; % #row->#mixtures, #col->#dimension    [k,d] = size(mu);    t0 = ones(M_D);     %t is sd    fprintf('Dimension = %d, M= %d \n',d,M_D);    log_record_L{tt} = nan(n_t,max_iter);    log_record_UL{tt} = nan(n_t,max_iter);    for i=1:n_t %repeat same test n_t times        [X,ytrue] = gen_mixture(n,mu,t0,Pi);        % initialization        mu0 = mu;        %r = R*2/5;        for k_mu0 = 1:M_D,            random_dir = mvnrnd(zeros(1,d),eye(d));            mu0(k_mu0,:) = mu(k_mu0,:) + random_dir/norm(random_dir)*r;        end        [test_UL,mu_infer] = test3(X,ytrue,mu,M_D,Pi,max_iter,mu0);%test2(X,ytrue,alpha,M_D,Pi,max_iter,L,mu0)        final_error_m5d5(tt,i) = exp(test_UL(end));        fprintf('n = %d, iRep: %d, err = %f\n',n,i,exp(test_UL(end)));    endend%% 3. M=d=6, pi = balancedfor tt=1:length(n_list)    M_D = 10;    n = n_list(tt);    %M_D=M_list(tt);    Pi = ones(1,M_D)/M_D; %imbalanced    mu = eye(M_D)*alpha; % #row->#mixtures, #col->#dimension    [k,d] = size(mu);    t0 = ones(M_D);     %t is sd    fprintf('Dimension = %d, M= %d \n',d,M_D);    log_record_L{tt} = nan(n_t,max_iter);    log_record_UL{tt} = nan(n_t,max_iter);    for i=1:n_t %repeat same test n_t times        [X,ytrue] = gen_mixture(n,mu,t0,Pi);        % initialization        mu0 = mu;        %r = R*2/5;        for k_mu0 = 1:M_D,            random_dir = mvnrnd(zeros(1,d),eye(d));            mu0(k_mu0,:) = mu(k_mu0,:) + random_dir/norm(random_dir)*r;        end        [test_UL,mu_infer] = test3(X,ytrue,mu,M_D,Pi,max_iter,mu0);%test2(X,ytrue,alpha,M_D,Pi,max_iter,L,mu0)        final_error_m10d10(tt,i) = exp(test_UL(end));        fprintf('n = %d, iRep: %d, err = %f\n',n,i,exp(test_UL(end)));    endend%% 4. M=3, d=10, pi = balancedfor tt=1:length(n_list)    M_D = 3;    n = n_list(tt);    %M_D=M_list(tt);    Pi = ones(1,M_D)/M_D;    d = 10;    mu = [eye(M_D),zeros(M_D,d-M_D)]*alpha; % #row->#mixtures, #col->#dimension    [k,~] = size(mu);    t0 = ones(M_D);     %t is sd    fprintf('Dimension = %d, M= %d \n',d,M_D);    log_record_L{tt} = nan(n_t,max_iter);    log_record_UL{tt} = nan(n_t,max_iter);    for i=1:n_t %repeat same test n_t times        [X,ytrue] = gen_mixture(n,mu,t0,Pi);        % initialization        mu0 = mu;        %r = R*2/5;        for k_mu0=1:M_D,            random_dir = mvnrnd(zeros(1,d),eye(d));            mu0(k_mu0,:) = mu(k_mu0,:) + random_dir/norm(random_dir)*r;        end        [test_UL,mu_infer] = test3(X,ytrue, mu, M_D, Pi, max_iter,mu0);        final_error_m3d10(tt,i) = exp(test_UL(end));        fprintf('n = %d, iRep: %d, err = %f\n',n,i,exp(test_UL(end)));    endendaxisx = sqrt(1./n_list);figure; plot(axisx, median(final_error_m3d3,2)/sqrt(3),'o-','LineWidth',1.5,'MarkerSize',8);hold on;plot(axisx, median(final_error_m3d3_unbal,2)/sqrt(3),'x-.','LineWidth',1.5,'MarkerSize',8);plot(axisx, median(final_error_m3d10,2)/sqrt(3),'^-.','LineWidth',1.5,'MarkerSize',8);plot(axisx, median(final_error_m5d5,2)/sqrt(5),'s--','LineWidth',1.5,'MarkerSize',8);plot(axisx, median(final_error_m10d10,2)/sqrt(10),'s--','LineWidth',1.5,'MarkerSize',8);leg = legend('Balanced M=3, d=3','Unbalanced M=3, d=3','Balanced M=3,d=10','Balanced M=5,d=5','Balanced M=10,d=10');set(leg,'FontSize',16,'Location','northeast');set(gca,'FontSize',14);ylabel('$\|\hat{\mu}-\mu^*\|/\sqrt{M}$','Interpreter','latex','FontSize',16)xlabel('$1/\sqrt{n}$','Interpreter','latex','FontSize',16)%xlim([sqrt(n_list(1)),sqrt(n_list(end))])%ylim([0,1e-5])%{figure; errorbar(axisx, mean(final_error_m3d3,2)/sqrt(3)-std(final_error_m3d3,[],2)/sqrt(3),...    mean(final_error_m3d3,2)/sqrt(3)+std(final_error_m3d3,[],2)/sqrt(3),'o-','LineWidth',1.5,'MarkerSize',8);hold on;errorbar(axisx, mean(final_error_m3d3_unbal,2)/sqrt(3)-std(final_error_m3d3_unbal,[],2)/sqrt(3),...    mean(final_error_m3d3_unbal,2)/sqrt(3)+std(final_error_m3d3_unbal,[],2)/sqrt(3),'x-.','LineWidth',1.5,'MarkerSize',8);%errorbar(axisx, mean(final_error_m10d10,2)/sqrt(6)-std(final_error_m10d10,[],2)/sqrt(6),...%    mean(final_error_m10d10,2)/sqrt(6)+std(final_error_m10d10,[],2)/sqrt(6),'s--','LineWidth',1.5,'MarkerSize',8);errorbar(axisx, mean(final_error_m3d10,2)/sqrt(3)-std(final_error_m3d10,[],2)/sqrt(3),...    mean(final_error_m3d10,2)/sqrt(3)+std(final_error_m3d10,[],2)/sqrt(3),'^-.','LineWidth',1.5,'MarkerSize',8);xlim([sqrt(n_list(2)),sqrt(n_list(end))])leg = legend('Balanced M=d=3','Unbalanced M=d=3','Balanced M=d=6','Balanced M=3,d=10');set(leg,'FontSize',16,'Location','northeast');set(gca,'FontSize',14);ylabel('$\|\hat{\mu}-\mu^*\|/\sqrt{M}$','Interpreter','latex','FontSize',16)xlabel('sqrt(sample size)','FontSize',16)%}